// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Backlog struct {
	ID          string      `json:"id"`
	User        *User       `json:"user"`
	Description *string     `json:"description,omitempty"`
	BacklogType BacklogType `json:"backlogType"`
}

type CreateBacklogInput struct {
	Description *string     `json:"description,omitempty"`
	BacklogType BacklogType `json:"backlogType"`
}

type Item struct {
	ID                string          `json:"id"`
	Backlog           *Backlog        `json:"backlog"`
	AvgTimeToComplete *int            `json:"avgTimeToComplete,omitempty"`
	CompletionState   CompletionState `json:"completionState"`
	Review            *string         `json:"review,omitempty"`
	Rate              *float64        `json:"rate,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type User struct {
	ID       string  `json:"id"`
	Email    string  `json:"email"`
	Username string  `json:"username"`
	Password string  `json:"password"`
	Bio      *string `json:"bio,omitempty"`
}

type BacklogType string

const (
	BacklogTypeGames  BacklogType = "GAMES"
	BacklogTypeBooks  BacklogType = "BOOKS"
	BacklogTypeMovies BacklogType = "MOVIES"
	BacklogTypeSeries BacklogType = "SERIES"
	BacklogTypeOther  BacklogType = "OTHER"
)

var AllBacklogType = []BacklogType{
	BacklogTypeGames,
	BacklogTypeBooks,
	BacklogTypeMovies,
	BacklogTypeSeries,
	BacklogTypeOther,
}

func (e BacklogType) IsValid() bool {
	switch e {
	case BacklogTypeGames, BacklogTypeBooks, BacklogTypeMovies, BacklogTypeSeries, BacklogTypeOther:
		return true
	}
	return false
}

func (e BacklogType) String() string {
	return string(e)
}

func (e *BacklogType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BacklogType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BacklogType", str)
	}
	return nil
}

func (e BacklogType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CompletionState string

const (
	CompletionStateDropped    CompletionState = "DROPPED"
	CompletionStateCompleted  CompletionState = "COMPLETED"
	CompletionStateInProgress CompletionState = "IN_PROGRESS"
	CompletionStateNotStarted CompletionState = "NOT_STARTED"
)

var AllCompletionState = []CompletionState{
	CompletionStateDropped,
	CompletionStateCompleted,
	CompletionStateInProgress,
	CompletionStateNotStarted,
}

func (e CompletionState) IsValid() bool {
	switch e {
	case CompletionStateDropped, CompletionStateCompleted, CompletionStateInProgress, CompletionStateNotStarted:
		return true
	}
	return false
}

func (e CompletionState) String() string {
	return string(e)
}

func (e *CompletionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompletionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompletionState", str)
	}
	return nil
}

func (e CompletionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
